{"version":3,"sources":["fake","file:///workspaces/vscode-web/vscode/src/vs/code/browser/workbench/workbench.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ICAA,CAAC,KAAK;QACJ,mBAAmB;QACnB,IAAI,MAAM,GAIN,EAAE,CAAC;QAEP,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;SACzB;aAAM;YACL,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;YAC5C,MAAM,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;SAC9B;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,2BAA2B,CAAC,EAAE;YACrD,MAAM,UAAU,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;YAEjC,UAAU,CAAC,2BAA2B;gBACpC,MAAM,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACnE,MAAM,GAAG,UAAU,CAAC;SACrB;QAED,IAAI,SAAS,CAAC;QACd,IAAI,MAAM,CAAC,SAAS,EAAE;YACpB,SAAS,GAAG,EAAE,SAAS,EAAE,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;SACzD;aAAM,IAAI,MAAM,CAAC,YAAY,EAAE;YAC9B,SAAS,GAAG,EAAE,YAAY,EAAE,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC;SAC/D;aAAM;YACL,SAAS,GAAG,SAAS,CAAC;SACvB;QAED,IAAI,SAAS,EAAE;YACb,MAAM,iBAAiB,GAAuB;gBAC5C,SAAS;gBACT,IAAI,EAAE,KAAK,EACT,SAAqB,EACrB,OAA+C,EAC/C,EAAE,CAAC,IAAI;gBACT,OAAO,EAAE,IAAI;aACd,CAAC;YACF,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,iBAAiB,EAAE,CAAC;SAC3C;QAED,MAAM,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY;eACnC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC;eAC5C,QAAQ,CAAC,IAAI,CAAC;QAEnB,IAAA,2BAAM,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC;;;ADzDL","file":"workbench.js","sourcesContent":["}).call(this);","import {\r\n  create\r\n} from \"vs/workbench/workbench.web.main\";\r\nimport { URI, UriComponents } from \"vs/base/common/uri\";\r\nimport { IWorkbenchConstructionOptions } from \"vs/workbench/browser/web.api\";\r\nimport { IWorkspace, IWorkspaceProvider } from \"vs/workbench/services/host/browser/browserHostService\";\r\ndeclare const window: any;\r\n\r\n(async function () {\r\n  // create workbench\r\n  let config: IWorkbenchConstructionOptions & {\r\n    folderUri?: UriComponents;\r\n    workspaceUri?: UriComponents;\r\n    domElementId?: string;\r\n  } = {};\r\n\r\n  if (window.product) {\r\n    config = window.product;\r\n  } else {\r\n    const result = await fetch(\"/product.json\");\r\n    config = await result.json();\r\n  }\r\n\r\n  if (Array.isArray(config.additionalBuiltinExtensions)) {\r\n    const tempConfig = { ...config };\r\n\r\n    tempConfig.additionalBuiltinExtensions =\r\n      config.additionalBuiltinExtensions.map((ext) => URI.revive(ext));\r\n    config = tempConfig;\r\n  }\r\n\r\n  let workspace;\r\n  if (config.folderUri) {\r\n    workspace = { folderUri: URI.revive(config.folderUri) };\r\n  } else if (config.workspaceUri) {\r\n    workspace = { workspaceUri: URI.revive(config.workspaceUri) };\r\n  } else {\r\n    workspace = undefined;\r\n  }\r\n\r\n  if (workspace) {\r\n    const workspaceProvider: IWorkspaceProvider = {\r\n      workspace,\r\n      open: async (\r\n        workspace: IWorkspace,\r\n        options?: { reuse?: boolean; payload?: object }\r\n      ) => true,\r\n      trusted: true,\r\n    };\r\n    config = { ...config, workspaceProvider };\r\n  }\r\n\r\n  const domElement = !!config.domElementId\r\n    && document.getElementById(config.domElementId)\r\n    || document.body;\r\n\r\n  create(domElement, config);\r\n})();\r\n"]}